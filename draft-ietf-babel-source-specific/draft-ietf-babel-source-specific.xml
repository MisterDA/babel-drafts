<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" []>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc toc="yes"?>
<?rfc tocdepth="2"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<rfc category="std" docName="draft-ietf-babel-source-specific-01"
ipr="trust200902">
<front>
<title>Source-Specific Routing in Babel</title>
<author fullname="Matthieu Boutier" initials="M." surname="Boutier">
<organization>IRIF, University of Paris-Diderot</organization>
<address>
<postal>
<street>Case 7014</street>
<city>75205 Paris Cedex 13</city>
<region></region>
<code></code>
<country>France</country>
</postal>
<email>boutier@irif.fr</email>
</address>
</author>
<author fullname="Juliusz Chroboczek" initials="J." surname="Chroboczek">
<organization>IRIF, University of Paris-Diderot</organization>
<address>
<postal>
<street>Case 7014</street>
<city>75205 Paris Cedex 13</city>
<region></region>
<code></code>
<country>France</country>
</postal>
<email>jch@irif.fr</email>
</address>
</author>

<date day="19" month="January" year="2018"/>

<abstract>
<t>Source-specific routing (also known as Source-Address Dependent
Routing, SADR) is an extension to traditional next-hop routing where
packets are forwarded according to both their destination and their source
address.  This document describes an extension for source-specific routing
to the Babel routing protocol.</t>
</abstract>

</front>

<middle>

<section title="Introduction and background">

<t>The Babel routing protocol <xref target="BABEL"/> is a distance vector
routing protocol for next-hop routing.  In next-hop routing, each node
maintains a forwarding table which maps destination prefixes to next hops.
The forwarding decision is a per-packet operation which depends on the
destination address of the packets and on the entries of the forwarding
table.  When a packet is about to be routed, its destination address is
compared to the prefixes of the routing table: the entry with the most
specific prefix containing the destination address of the packet is
chosen, and the packet is forwarded to the associated next-hop.  Next-hop
routing is a simple, well understood paradigm that works satisfactorily in
a large number of cases.</t>

<t>Source-specific routing <xref target="SS-ROUTING"/>, or Source Address
Dependent Routing (SADR) <xref target="DSR"/>, is a modest extension to
next-hop routing where the forwarding decision depends not only on the
destination address but also on the source address of the packet being
routed, which makes it possible for two packets with the same destination
but different source addresses to be routed following different paths.
The forwarding tables are extended to map pairs of prefixes (destination,
source) to next hops.  When multiple entries match a given packet, the one
with the most specific destination prefix is chosen, and, in case of
equality, the one with the most specific source prefix.</t>

<t>The main application of source-specific routing is multihoming with
multiple addresses, a technique for multihoming which, unlike multihoming,
does not require the use of provider-independent addresses and does not
cause excessive growth of the global routing table.  In a network using
this form of multihoming, each host is given multiple addresses, one per
upstream provider.  When a host sources a packet, it picks one of its
addresses as the source address of the packet, and source-specific routing
is used to route the packet to an edge router that is connected to the
corresponding provider, which is compatible with <xref target="BCP84"/>.
More details are given in <xref target="SS-ROUTING"/> and
<xref target="DSR"/>.</t>

<t>This document describes a source-specific routing extension for the
Babel routing protocol <xref target="BABEL"/>.  This involves minor
changes to the data structures, which must include a source prefix in
addition to the destination prefix already present, and some changes to
the Update, Route Request and Seqno Request TLVs, which are extended with
a source prefix.  The source prefix is encoded using a mandatory sub-TLV
(<xref target="BABEL"/> Section 4.4).</t>

</section>

<section title="Specification of Requirements">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in <xref
target="RFC2119"/>.</t>

</section>

<section title="Data Structures">

<t>A number of the conceptual data structures described in Section 3.2 of
<xref target="BABEL"/> contain a destination prefix.  This extension
extends these data structures with a source prefix.  Data from the
original protocol, which do not specify a source prefix, are encoded with
a zero length source prefix, which matches exactly the same set of packets
as the original, non-source-specific data (see in particular <xref
target="route-acquisition"/> below).</t>

<section title="The Source Table">

<t>Every Babel node maintains a source table, as described in <xref
target="BABEL"/>, Section&nbsp;3.2.5.  A source-specific Babel node
extends this table with the following field:</t>
<t><list style="symbols">
<t>The source prefix specifying the source address of packets to which
this entry applies.</t>
</list></t>

<t>The source table is now indexed by triples of the form (prefix, source
prefix, router-id).</t>

<t>Note that the route entry contains a source which itself contains
a source prefix.  These are two very different concepts, and should not be
confused.</t>

</section>

<section title="The Route Table">

<t>Every Babel node maintains a route table, as described in <xref
target="BABEL"/>, Section&nbsp;3.2.6.  Each route table entry contains,
among other data, a source, which this extension extends with a source
prefix as described above.  The route table is now indexed by triples of
the form (prefix, source prefix, neighbour), where the prefix and source
prefix are obtained from the source.</t>

</section>

<section title="The Table of Pending Seqno Requests">

<t>Every Babel node maintains a table of pending seqno requests, as
described in <xref target="BABEL"/>, Section&nbsp;3.2.7.  A
source-specific Babel node extends this table with the following entry:</t>

<t><list style="symbols">
<t>The source prefix being requested.</t>
</list></t>

<t>The table of pending seqno requests is now indexed by triples of the
form (prefix, source prefix, router-id).</t>

</section>

</section>

<section title="Data Forwarding">

<t>In next-hop routing, if two routing table entries overlap, then one is
necessarily more specific than the other; the "longest prefix rule"
specifies that the most specific applicable routing table entry is
chosen.</t>

<t>With source-specific routing, there might no longer be a most specific
applicable entry: two routing table entries might match a given packet
without one necessarily being more specific than the other.  Consider for
example the following routing table:</t>

<figure><artwork><![CDATA[
          destination                source     next-hop
    2001:DB8:0:1::/64                  ::/0            A
                 ::/0     2001:DB8:0:2::/64            B
]]></artwork></figure>

<t>This specifies that all packets with destination in 2001:DB8:0:1::/64
are to be routed through A, while all packets with source in
2001:DB8:0:2::/64 are to be routed through B.  A packet with source
2001:DB8:0:2::42 and destination 2001:DB8:0:1::57 matches both rules,
although neither is more specific than the other.  A choice is necessary,
and unless the choice being made is the same on all routers in a routing
domain, persistent routing loops may occur.  More informations are
available in <xref target="SS-ROUTING"/> Section IV.C.</t>

<t>A Babel implementation MUST choose routing table entries by using the
so-called destination-first ordering, where a routing table entry R1 is
preferred to a routing table entry R2 when either R1's destination prefix
is more specific than R2's, or the destination prefixes are equal and R1's
source prefix is more specific than R2's.  (In more formal terms, routing
table entries are compared using the lexicographic product of the
destination prefix ordering by the source prefix ordering.)</t>

<t>In practice, this means that a source-specific Babel implementation
must take care that any lower layer that performs packet forwarding obey
this semantics.  In particular:</t>

<t><list style="symbols">
<t>If the lower layers implement the destination-first ordering, then the
Babel implementation MAY use them directly;</t>
<t>If the lower layers can hold source-specific routes, but not with the
right semantics, then the Babel implementation MUST disambiguate the
routing table by using a suitable disambiguation algorithm (see <xref
target="SS-ROUTING"/> Section V.B for such an algorithm);</t>
<t>If the lower layers cannot hold source-specific routes, then a Babel
implementation MUST silently ignore (drop) any source-specific routes.</t>
</list></t>

<t>This behaviour aligns with the ongoing work in the routing area for how
to handle source-specific routes <xref target="DSR"/>.</t>

</section>

<section title="Protocol Operation">

<t>This extension does not fundamentally change the operation of the Babel
protocol.  We only describe the fundamental differences between the
original protocol and this extension in this section.  The other
mechanisms described in <xref target="BABEL"/> (Section&nbsp;3) are
extended to pairs of (destination, source) prefixes instead of just
(destination) prefixes.</t>

<section title="Source-specific messages">

<t>Three messages carry a destination prefix: Updates, Route Requests and
Seqno Requests.  These messages are extended to carry, in addition, a
source prefix if (and only if) the corresponding route is source-specific.
More formally, an Update, a Route Request and a Seqno Request MUST carry a
source prefix if they concern a source-specific route (non-zero length
source prefix) and MUST NOT carry a source prefix otherwise (zero length
source prefix).  A message which carries a source prefix is said to be
source-specific.</t>

</section>

<section title="Route Acquisition" anchor="route-acquisition">

<t>When a non-source-specific Babel node receives a source-specific
update, it silently ignores it.  When a source-specific Babel node
receives a non-source-specific update, it MUST treat this update as a zero
length source-specific update.</t>

<t>When a source-specific Babel node receives a source-specific update
(prefix, source prefix, router-id, seqno, metric) from a neighbour neigh,
it behaves as described in <xref target="BABEL"/> (Section&nbsp;3.5.4)
though indexing entries by (prefix, source prefix, neigh).</t>

</section>

<section title="Wildcard retractions (update)">

<t>The original protocol defines a wildcard update with AE equals to 0 as
being a wildcard retraction.  A node receiving a wildcard retraction on an
interface must consider that the sending node retracts all the routes it
advertised on this interface.</t>

<t>Wildcard retractions are used when a node is about to leave the
network.  Thus, this extension does not define source-specific wildcard
retraction, but extends wildcard retraction to apply also to
source-specific routes.  More formally, a wildcard update MUST NOT carry a
source prefix, and a source-specific Babel node receiving a (legacy)
wildcard update MUST retracts all routes it learns from this node
(including source-specific ones).</t>

</section>

<section title="Wildcard requests">

<t>The original Babel protocol states that when a node receives a wildcard
route request, it SHOULD send a full routing table dump.  This extension
does not change this statement: a source-specific node SHOULD send a full
routing table dump when receiving a wildcard request.</t>

<t>Source-specific wildcard requests does not exist: a wildcard request
MUST NOT carry a source prefix, and a source prefix associated with a
wildcard update SHOULD be ignored.</t>

<t>One of the motivation behalf this design choice is that wildcard
requests are defined with AE equals to 0.  They naturally apply to AE 1,
AE 2 and AE 3 defined in <xref target="BABEL"/>, but also to any other AE
which may be defined in the future.  New AEs, new TLVs or new sub-TLVs are
extension mechanisms.  Thus, the semantics of a wildcard request is
clearly to also asks for routes coming from extensions.</t>

</section>

</section>

<section title="Compatibility with the base protocol">

<t>The protocol extension defined in this document is, to a great extent,
interoperable with the base protocol defined in <xref target="BABEL"/>
(and all its known extensions).  More precisely, if non-source-specific
routers and source-specific routers are mixed in a single routing domain,
Babel's loop-avoidance properties are preserved, and, in particular, no
persistent routing loops will occur.</t>

<t>However, this extension is not compatible with the Experimental's Babel
Routing Protocol <xref target="RFC6126"/>.  It requires the mandatory
sub-TLV introduced in <xref target="BABEL"/>.  Consequently, this
extension MUST NOT be used with routers implementing RFC 6126, otherwise
persistent routing loops may occur.</t>

<section title="Loop-avoidance" anchor="loop">

<t>The extension defined in this protocol uses a new Mandatory sub-TLV to
carry the source prefix information.  As discussed in Section&nbsp;4.4 of
<xref target="BABEL"/>, this encoding ensures that non-source-specific
routers will silently ignore the whole TLV, which is necessary to avoid
persistent routing loops in hybrid networks.</t>

<t>Consider two nodes A and B, with A source-specific announcing a route
to (D,&nbsp;S).  Suppose that B (non source-specific) merely ignores the
source prefix information when it receives the update rather than ignoring
the whole TLV, and re-announces the route as D.  This re-announcement
reaches A, which treats it as (D,&nbsp;::/0).  Packets destined to D but
not sourced in S will be forwarded by A to B, and by B to A, causing a
persistent routing loop:</t>
<figure><artwork><![CDATA[
    (D,S)                 (D)
     <--                 <--
  ------ A ----------------- B
           -->
          (D,::/0)
]]></artwork></figure>

</section>

<section title="Starvation and Blackholes">

<t>In general, discarding source-specific routes by non-source-specific
routers will cause route starvation.  Intuitively, unless there are enough
non-source-specific routes in the network, non-source-specific routers
will suffer starvation, and discard packets for destinations that are only
announced by source-specific routers.</t>

<t>A simple yet sufficient condition for avoiding starvation is to build a
connected source-specific backbone that includes all of the edge routers,
and announce a (non-source-specific) default route towards the
backbone.</t>

</section>

</section>

<section title="Protocol Encoding">

<t>In the original Babel protocol, routing entries are characterized by a
destination prefix.  Three TLVs use this destination prefix to communicate
about routing entries.  The Update TLV announce that a node has (or
retracts) a route for the given destination.  The Route Request asks a
neighbour to send an Update for the given destination.  The Seqno Request
asks the source of the route to increase the sequence number of the route.
These three messages need to be augmented with a source prefix to handle
source-specific routing entries.</t>

<t>This extension defines a new sub-TLV used to carry a source prefix: the
Source Prefix sub-TLV.  It can be used within an Update, a Route Request
or a Seqno Request TLV to characterize source-specific routing entries, in
conjunction with the destination prefix natively carried by these
TLVs.</t>

<t>Since a source-specific routing entry is characterized by a single
destination prefix and a single source prefix, a source-specific message
contains exactly one Source Prefix sub-TLV.  A node MUST NOT send more
that one Source Prefix sub-TLV by TLV.  A node receiving more than one
Source Prefix sub-TLV in a single TLV SHOULD ignore this TLV.  It MAY
ignore the whole packet.</t>

<t>As explained before, an entry with a zero length source prefix is not a
source-specific entry.  Such entry MUST be sent with a legacy Update: a
node MUST NOT send a zero length Source Prefix sub-TLV.  A node receiving
a zero length Source Prefix SHOULD ignore the whole TLV.</t>

<section title="Source Prefix sub-TLV">
<figure><artwork><![CDATA[
0                   1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|Type = TBD[128]|    Length     |  Source Plen  | Source Prefix...
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
]]></artwork></figure>

<t>Fields:
<list style="hanging" hangIndent="10">
<t hangText="Type">Set to TBD[128] to indicate a Source Prefix
sub-TLV.</t>
<t hangText="Length">The length of the body, exclusive of the Type and
Length fields.</t>
<t hangText="Source Plen">The length of the advertised source prefix.
This MUST NOT be 0.</t>
<t hangText="Source Prefix">The source prefix being advertised.  This
field's size is (Source Plen)/8 rounded upwards.</t>
</list>
</t>

<t>The source prefix encoding (AE) is the same as the Prefix's.  It is
defined by the AE field of the corresponding TLV.</t>

<t>There MUST NOT be more than one Source Prefix sub-TLV per TLV.</t>

<t>Note that this sub-TLV is a Mandatory sub-TLV.  The whole TLV MUST be
ignored if that sub-TLV is not recognized (or malformed).  Otherwise,
routing loops may occur (see <xref target="loop"/>).</t>

</section>

<section title="Source-specific Update">

<t>The source-specific Update is an Update TLV with a Source Prefix
sub-TLV.  It advertises or retracts source-specific routes in the same
manner than routes with non-source-specific Updates (see <xref
target="BABEL"/>).  A wildcard retraction (Update with AE equals to 0)
MUST NOT carry a Source Prefix sub-TLV.</t>

<t>Contrary to the destination prefix, this extension does not compress
the source prefix attached to Updates.  However, as defined in <xref
target="BABEL"/> (Section&nbsp;4.5), the compression is allowed for the
destination prefix of source-specific routes.  Legacy implementation will
correctly update their parser state while ignoring the whole TLV
afterwards.</t>

</section>

<section title="Source-specific (Route) Request" anchor="ss-request">

<t>A source-specific Route Request is a Route Request TLV with a Source
Prefix sub-TLV.  It prompts the receiver to send an update for a given
pair of destination and source prefixes.  A wildcard request (Route
Request with AE equals to 0) MUST NOT carry a Source Prefix sub-TLV.</t>

</section>

<section title="Source-Specific Seqno Request">

<t>A source-specific Seqno Request is a Seqno Request TLV with a Source
Prefix sub-TLV.  It is just like a Seqno Request for a source-specific
route.  It uses the same mechanisms described in <xref
target="BABEL"/>.</t>

</section>

</section>

<section title="IANA Considerations">

<t>IANA is requested to allocate TBD, a Babel sub-TLV type from the range
reserved for mandatory sub-TLVs [value 128 suggested], and to add the
following entry to the "Babel mandatory sub-TLV Types" registry:</t>

<texttable>
<ttcol>Type</ttcol><ttcol>Name</ttcol><ttcol>Reference</ttcol>
<c>TBD[128]</c><c>Source Prefix</c><c>(this document)</c>
</texttable>

</section>

<section title="Security considerations">

<t>The extension defined in this document adds a new sub-TLV to three TLVs
already present in the original Babel protocol.  It does not by itself
change the security properties of the protocol.</t>

</section>

</middle>

<back>

<references title="Normative References">

<reference anchor="RFC2119"><front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname="Scott Bradner" initials="S." surname="Bradner"/>
<date month="March" year="1997"/>
</front>
<seriesInfo name="BCP" value="14"/>
<seriesInfo name="RFC" value="2119"/>
<seriesInfo name="DOI" value="10.17487/RFC2119"/>
</reference>

<reference anchor="BABEL"><front>
<title>The Babel Routing Protocol</title>
<author fullname="Juliusz Chroboczek" initials="J." surname="Chroboczek"/>
<date month="May" year="2017"/>
</front>
<seriesInfo name="Internet Draft" value="draft-ietf-babel-rfc6126bis-04"/>
</reference>

<reference anchor="RFC6126"><front>
<title>The Babel Routing Protocol (Experimental)</title>
<author fullname="Juliusz Chroboczek" initials="J." surname="Chroboczek"/>
<date month="February" year="2011"/>
</front>
<seriesInfo name="RFC" value="6126"/>
</reference>

<reference anchor="BCP84"><front>
<title>Ingress Filtering for Multihomed Networks</title>
<author fullname="Fred Baker" initials="F." surname="Baker"/>
<author fullname="Pekka Savola" initials="P." surname="Savola"/>
<date month="March" year="2004"/>
</front>
<seriesInfo name="BCP" value="84"/>
<seriesInfo name="RFC" value="3704"/>
</reference>

</references>

<references title="Informative References">

<reference anchor="DSR"><front>
<title>Destination/Source Routing</title>
<author fullname="David Lamparter" initials="D." surname="Lamparter"/>
<author fullname="Anton Smirnov" initials="A." surname="Smirnov"/>
<date month="May" year="2018"/>
</front>
<seriesInfo name="Internet Draft"
            value="draft-ietf-rtgwg-dst-src-routing-06"/>
</reference>

<reference anchor="SS-ROUTING">
<front>
<title>Source-Specific Routing</title>
<author initials="M." surname="Boutier" fullname="Matthieu Boutier"/>
<author initials="J." surname="Chroboczek" fullname="Juliusz Chroboczek"/>
<date year="2014" month="August"/>
</front>
<annotation>In Proc. IFIP Networking 2015.  A slightly earlier version
is available online from http://arxiv.org/pdf/1403.0445.</annotation>
</reference>

</references>

</back>

</rfc>

